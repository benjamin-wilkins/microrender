class Renderer {
  #handlers = {};

  constructor(fragment) {
    this.fragment = fragment;
    this.fragment.js(this.select);
  };

  get select() {
    const renderer = this;

    return function (selector) {
      const handler = new ElementHandler();
      renderer.#handlers[selector] = handler;
      return handler;
    };
  };

  async render() {
    for (let [selector, handler] of this.#handlers) {
      if (this.#handlers.hasOwnProperty(selector)) {
        let domElements = this.fragment.root.querySelectorAll(selector);
        
        await Promise.all(domElements.map(async (domElement) => {
          const element = new Element(domElement);
          await handler.element(element)
        }));
      };
    };
  };
};

class ElementHandler {
  #transforms = []

  do(transform) {
    this.#transforms.push(transform);
  };

  async element(domElement) {
    const element = new Element(domElement);

    for (let transform of this.#transforms) {
      transform(element);
    }
  };
};

class Element {
  constructor(domElement) {
    this.domElement = domElement;
  };

  getAttribute(attr) {return this.domElement.getAttribute(attr);};

  setContent(content) {this.domElement.innerHTML = content;};
  setAttribute(attr, value) {this.domElement.setAttribute(attr, value);};
};

export default Renderer;